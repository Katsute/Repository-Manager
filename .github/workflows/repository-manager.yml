name: Repository Manager
on:
  workflow_call:
    inputs:
      login:
        type: string
        required: true
      username:
        type: string
        required: true
      email:
        type: string
        required: true
    secrets:
      token:
        required: true

jobs:
  debug:
    name: Debug
    runs-on: ubuntu-latest
    if: github.repository == 'Katsute/Repository-Manager'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Print Debug
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.token }}
          script: core.info(require("util").inspect(context, true, 6));

  comment:
    name: Commands
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains('OWNER, MEMBER, COLLABORATOR', github.event.comment.author_association)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Parse Comment
        uses: actions/github-script@v6
        env:
          login: ${{ inputs.login }}
          comment: ${{ github.event.comment.body }}
        with:
          github-token: ${{ secrets.token }}
          script: |
            const login = process.env.login;
            const comment = process.env.comment;

            if(comment.startsWith(`@${login}`)){
              const parts = comment.split(' ').slice(1);
              core.exportVariable("command", parts[0].toLowerCase());
              core.exportVariable("args", parts.slice(1).join(' '));
              core.exportVariable("argsnh", parts.slice(1).join(' ').replace(/#/g, ''));
              core.exportVariable("argswf", parts.slice(1).join(' ').replace(/\.ya?ml/g, ''));
            }

      - name: Create Issue
        if: env.command == 'issue'
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ACTOR: ${{ github.event.sender.login }}
          NUMBER: ${{ github.event.issue.number }}
          TITLE: ${{ env.args }}
          ISSUE: ${{ github.event.issue && 'issue' || 'pr' }}
        run: |
          link=$(gh issue create -t "$TITLE" -b  "")
          number=${link##*/}

          link=$(gh $ISSUE comment $NUMBER -b "@$ACTOR created a new issue at [#$number]($link)")
          id=$(gh $ISSUE view $NUMBER --json comments --jq 'first(.comments.[]|select(.url=='\"$link\"')).id')
          echo "REPLY=$id" >> $GITHUB_ENV

      - name: Dispatch Workflow
        if: (env.command == 'dispatch' || env.command == 'workflow') && !github.event.issue.pull_request && env.args
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ACTOR: ${{ github.event.sender.login }}
          NUMBER: ${{ github.event.issue.number }}
          WORKFLOW: ${{ env.argswf }}
          REF: ${{ github.event.repository.default_branch }}
          REPO: ${{ github.repository }}
          ISSUE: ${{ github.event.issue && 'issue' || 'pr' }}
        run: |
          gh workflow run $WORKFLOW

          link=$(gh $ISSUE comment $NUMBER -b "@$ACTOR dispatched workflow [${WORKFLOW}.yml](https://github.com/${REPO}/actions/workflows/${WORKFLOW}.yml) on branch '$REF'")
          id=$(gh $ISSUE view $NUMBER --json comments --jq 'first(.comments.[]|select(.url=='\"$link\"')).id')
          echo "REPLY=$id" >> $GITHUB_ENV

      - name: Dispatch Workflow (pull)
        if: (env.command == 'dispatch' || env.command == 'workflow') && github.event.issue.pull_request && env.args
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ACTOR: ${{ github.event.sender.login }}
          NUMBER: ${{ github.event.issue.number }}
          WORKFLOW: ${{ env.args }}
          REPO: ${{ github.repository }}
          ISSUE: ${{ github.event.issue && 'issue' || 'pr' }}
        run: |
          REF=$(gh pr view $NUMBER --json headRefName --jq ".headRefName")

          gh workflow run $WORKFLOW --ref $REF

          link=$(gh $ISSUE comment $NUMBER -b "@$ACTOR dispatched workflow [${WORKFLOW}](https://github.com/${REPO}/actions/workflows/${WORKFLOW}) on branch '$REF'")
          id=$(gh $ISSUE view $NUMBER --json comments --jq 'first(.comments.[]|select(.url=='\"$link\"')).id')
          echo "REPLY=$id" >> $GITHUB_ENV

      - name: Duplicate PR
        if: (env.command == 'pr' || env.command == 'pull') && github.event.issue.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ACTOR: ${{ github.event.sender.login }}
          NUMBER: ${{ github.event.issue.number }}
          TITLE: ${{ env.args || github.event.issue.title }}
          name: ${{ inputs.username }}
          email: ${{ inputs.email }}
        run: |
          REF=$(gh pr view $NUMBER --json headRefName --jq ".headRefName")
          SHA=$(gh pr view $NUMBER --json headRefOid --jq ".headRefOid")
          PSHA=${SHA:0:7}
          BRANCH="pr#$NUMBER@$PSHA"

          git config --global user.name "$name"
          git config --global user.email "$email"

          git fetch --all
          git checkout -b "$BRANCH" "origin/$REF"
          git push origin HEAD

          link=$(gh pr create -t "$TITLE" -b "" --head "$BRANCH")
          number=${link##*/}

          link=$(gh pr comment $NUMBER -b "@$ACTOR created a new pull request at [#$number]($link)")
          id=$(gh $ISSUE view $NUMBER --json comments --jq 'first(.comments.[]|select(.url=='\"$link\"')).id')
          echo "REPLY=$id" >> $GITHUB_ENV

      - name: Merge PR
        if: env.command == 'merge' && github.event.issue.pull_request && env.args
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ACTOR: ${{ github.event.sender.login }}
          NUMBER: ${{ github.event.issue.number }}
          OWNER: ${{ github.event.repository.owner.login }}
          REPO: ${{ github.event.repository.name }}
          PULL: ${{ env.argsnh }}
        run: |
          FROM=$(gh pr view $NUMBER --json headRefName --jq ".headRefName")
          DEST=$(gh pr view $PULL --json headRefName --jq ".headRefName")
          URL=$(gh pr view $PULL --json url --jq ".url")

          gh api --method POST -H "Accept: application/vnd.github+json" /repos/$OWNER/$REPO/merges -f base="$DEST" -f head="$FROM" -f commit_message="Merge branch '$FROM' into $DEST"

          link=$(gh pr comment $NUMBER -b "@$ACTOR merged this pull request into [#$PULL]($URL)")
          id=$(gh $ISSUE view $NUMBER --json comments --jq 'first(.comments.[]|select(.url=='\"$link\"')).id')
          echo "REPLY=$id" >> $GITHUB_ENV

      - name: Merge Master
        if: (env.command == 'sync' || env.command == 'update') && github.event.issue.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          NUMBER: ${{ github.event.issue.number }}
          MASTER: ${{ github.event.repository.default_branch }}
          OWNER: ${{ github.event.repository.owner.login }}
          REPO: ${{ github.event.repository.name }}
        run: |
          BRANCH=$(gh pr view $NUMBER --json headRefName --jq ".headRefName")

          gh api --method POST -H "Accept: application/vnd.github+json" /repos/$OWNER/$REPO/merges -f base="$BRANCH" -f head="$MASTER" -f commit_message="Merge branch '$MASTER' into $BRANCH"

      - name: Push Empty Commit
        if: env.command == 'push' && github.event.issue.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          NUMBER: ${{ github.event.issue.number }}
          name: ${{ inputs.username }}
          email: ${{ inputs.email }}
        run: |
          BRANCH=$(gh pr view $NUMBER --json headRefName --jq ".headRefName")

          git config --global user.name "$name"
          git config --global user.email "$email"

          git fetch --all
          git checkout "$BRANCH"
          git commit --allow-empty -m "Empty commit"
          git push origin HEAD

      - name: Review PR (approve)
        if: env.command == 'approve' && github.event.issue.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ACTOR: ${{ github.event.sender.login }}
          NUMBER: ${{ github.event.issue.number }}
          MESSAGE: ${{ env.args }}
        run: gh pr review $NUMBER --approve --body "Approved by @$ACTOR $MESSAGE"

      - name: Review PR (reject)
        if: env.command == 'reject' && github.event.issue.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ACTOR: ${{ github.event.sender.login }}
          NUMBER: ${{ github.event.issue.number }}
          MESSAGE: ${{ env.args }}
        run: gh pr review $NUMBER --request-changes --body "Rejected by @$ACTOR $MESSAGE"

      - name: Hide Comment
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ID: ${{ github.event.comment.node_id }}
        run: |
          gh api graphql -f id=$ID -f query='mutation($id: ID!){ minimizeComment(input: {classifier: RESOLVED, subjectId: $id}){ minimizedComment{ isMinimized }}}'

      - name: Hide Reply
        if: env.REPLY
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ID: ${{ env.REPLY }}
        run: |
          gh api graphql -f id=$ID -f query='mutation($id: ID!){ minimizeComment(input: {classifier: RESOLVED, subjectId: $id}){ minimizedComment{ isMinimized }}}'

  create:
    name: Branch Rename
    runs-on: ubuntu-latest
    if: github.event_name == 'create' && github.ref_type == 'branch'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Create SHA Branch
        if: endsWith(github.event.ref, '@')
        env:
          REF: ${{ github.event.ref }}
          SHA: ${{ github.sha }}
          name: ${{ inputs.username }}
          email: ${{ inputs.email }}
        run: |
          psha=${SHA:0:7}
          branch="$REF$psha"

          git config --global user.name "$name"
          git config --global user.email "$email"

          git checkout -b "$branch"
          git push origin HEAD

          git push origin --delete $REF

      - name: Create Orphan Branch
        if: startsWith(github.event.ref, '!')
        env:
          REF: ${{ github.event.ref }}
          name: ${{ inputs.username }}
          email: ${{ inputs.email }}
        run: |
          branch=${REF:1}

          git config --global user.name "$name"
          git config --global user.email "$email"

          git checkout --orphan "$branch"
          git rm -rf .
          git commit --allow-empty -m "Initial commit"
          git push origin HEAD

          git push origin --delete $REF

  issue:
    name: Issue Locking
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Issue Lock
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ISSUE: ${{ github.event.issue && 'issue' || 'pr' }}
          NUMBER: ${{ github.event.issue && github.event.issue.number || github.event.pull_request.number }}
          LOCK: ${{ github.event.action == 'closed' && 'lock' || 'unlock' }}
        run: gh $ISSUE $LOCK $NUMBER

  label:
    name: Label Sync
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.repository != 'Katsute/Repository-Manager'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Sync Labels
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          REPO: ${{ github.repository }}
        run: gh label clone Katsute/Repository-Manager --repo $REPO -f

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

  sync:
    name: Sync Files
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Check For PR
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          OWNER: ${{ github.event.repository.owner.login }}
          REPO: ${{ github.event.repository.name }}
        run: |
          branches=$(gh api -H "Accept: application/vnd.github+json" /repos/$OWNER/$REPO/branches --jq ".[].name")

          for branch in ${branches// /}
          do
              if [[ $branch == "repository-manager-sync" ]]
              then
                  echo "new=true" >> $GITHUB_ENV
              fi
          done

      - name: Initialize Git
        if: env.new != 'true'
        env:
          name: ${{ inputs.username }}
          email: ${{ inputs.email }}
        run: |
          git config --global user.name "$name"
          git config --global user.email "$email"

          git checkout -B "repository-manager-sync"

      - name: Copy Files
        if: env.new != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3.raw" -L "https://api.github.com/repos/Katsute/Repository-Manager/contents/pr.md" -o repo-manager-tmp-pr.md
          curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3.raw" -L "https://api.github.com/repos/Katsute/Repository-Manager/contents/release.yml" -o repo-manager-tmp-release.yml
          curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3.raw" -L "https://api.github.com/repos/Katsute/Repository-Manager/contents/dependabot.yml" -o repo-manager-tmp-dependabot.yml
          curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3.raw" -L "https://api.github.com/repos/Katsute/Repository-Manager/contents/workflow.yml" -o repo-manager-tmp-workflow.yml

      - name: Sync Files
        uses: actions/github-script@v6
        if: env.new != 'true'
        env:
          OWNER: ${{ github.event.repository.owner.login }}
          REPO: ${{ github.event.repository.name }}
        with:
          github-token: ${{ secrets.token }}
          script: |
            const fs = require("fs");
            const path = require("path");

            let changed = false;

            const compareAndUpdate = (local, latest) => {
              if(!fs.existsSync(local) || fs.readFileSync(local, "utf-8") != fs.readFileSync(latest, "utf-8")){
                changed = true;
                fs.copyFileSync(latest, local);
              }
              fs.unlinkSync(latest);
            };

            // mkdir

            fs.existsSync(".github") || fs.mkdirSync(".github");
            fs.existsSync(path.join(".github", "workflows")) || fs.mkdirSync(path.join(".github", "workflows"), {recursive: true});

            // pr

            compareAndUpdate(path.join(".github", "pull_request_template.md"), "repo-manager-tmp-pr.md");

            // release

            compareAndUpdate(path.join(".github", "release.yml"), "repo-manager-tmp-release.yml");

            // workflow

            compareAndUpdate(path.join(".github", "workflows", "manager.yml"), "repo-manager-tmp-workflow.yml");

            // dependabot

            compareAndUpdate(path.join(".github", "workflows", "dependabot.yml"), "repo-manager-tmp-dependabot.yml");

            { // dependabot (yml)

              const dependabot = path.join(".github", "dependabot.yml");

              if(fs.existsSync(dependabot)){
                fs.copyFileSync(dependabot, "repo-manager-tmp-dependabot.yml");
                let buf = fs.readFileSync("repo-manager-tmp-dependabot.yml", "utf-8");

                buf = buf.replace(/(?<=^    labels:).*?(?=^    \S)/gms, " [dependencies]\n");
                buf = buf.replace(/(?<=^    assignees:).*?(?=^    \S)/gms, " [Katsute]\n");

                let sch = "";

                sch += "\n      interval: daily";
                sch += `\n      time: "07:00"`;
                sch += "\n      timezone: US/Eastern";

                buf = buf.replace(/(?<=^    schedule:).*?(?=^    \S)/gms, sch + '\n');
                buf = buf.replace(/(?<=^    open-pull-requests-limit:).*?$/gms, " 10");

                fs.writeFileSync("repo-manager-tmp-dependabot.yml", buf, "utf-8");

                compareAndUpdate(dependabot, "repo-manager-tmp-dependabot.yml");
              }

            }

            // readme

            if(fs.existsSync("README.md")){
              fs.copyFileSync("README.md", "repo-manager-tmp-README.md");
              let buf = fs.readFileSync("repo-manager-tmp-README.md", "utf-8");

              { // copilot
                const token = "<!-- Copilot -->";
                const table =
            `<table>
                <img alt="GitHub Copilot" align="left" src="https://raw.githubusercontent.com/KatsuteDev/.github/main/profile/copilot-dark.png#gh-dark-mode-only" width="50">
                <img alt="GitHub Copilot" align="left" src="https://raw.githubusercontent.com/KatsuteDev/.github/main/profile/copilot-light.png#gh-light-mode-only" width="50">
                <p>GitHub Copilot is <b>strictly prohibited</b> on this repository.<br>Pulls using this will be rejected.</p>
            </table>`;
                buf = buf.replace(new RegExp(`^${token}$.*?^${token}$`, "gms"), `${token}\n${table.trim()}\n${token}`);
              }

              { // contributors
                const contributors = (await github.rest.repos.listContributors({
                    owner: process.env.OWNER,
                    repo: process.env.REPO,
                    per_page: 100
                })).data;

                const token = "<!-- Contributors -->";

                let table = '';
                table += `<div align="center">`;
                table += "\n    <table>";
                let c = 0;

                for(const contributor of contributors){
                  if(!contributor.login.endsWith("[bot]") && contributor.contributions >= 4){
                    c++;
                    if(c % 5 === 1) table += "\n        <tr>";

                    const user = (await github.rest.users.getByUsername({
                        username: contributor.login
                    })).data;

                    table += `\n            <td align="center">`;
                    table += '\n' +
            `                <a href="https://https.github.com/${contributor.login}">
                                <img src="https://avatars.githubusercontent.com/u/${contributor.id}?v=4" width="100" alt="${user.name || contributor.login}">
                                <br>
                                <sup><b>${user.name || contributor.login}</b></sup>
                            </a>`;
                    table += "\n            </td>";

                    if(c % 5 === 0) table += "\n        </tr>";
                  }
                  if(!table.endsWith("</tr>")) table += "\n        </tr>";
                  table += "\n    </table>";
                  table += "\n</div>";
                }

                buf = buf.replace(new RegExp(`^${token}$.*?^${token}$`, "gms"), `${token}\n${table.trim()}\n${token}`);
              }

              fs.writeFileSync("repo-manager-tmp-README.md", buf, "utf-8");

              compareAndUpdate("README.md", "repo-manager-tmp-README.md");

            }

            // copyright

            // trim

            // export

            if(changed)
                core.exportVariable("changed", "true");

      - name: Create PR
        if: env.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          git add .
          git commit -m "Update repository files"
          git push origin HEAD

          gh pr create -t "Update repository files" -b ""

  sync_del:
    name: Sync Branch Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request && github.event.pull_request.head.ref == 'repository-manager-sync'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Delete Branch
        env:
          BRANCH: ${{ github.event.ref }}
          name: ${{ inputs.username }}
          email: ${{ inputs.email }}
        run: |
          git config --global user.name "$name"
          git config --global user.email "$email"

          git push origin --delete $BRANCH