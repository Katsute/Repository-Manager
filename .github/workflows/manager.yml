name: Repository Manager
on:
  workflow_call:
    inputs:
      login:
        type: string
        required: true
      username:
        type: string
        required: true
      email:
        type: string
        required: true
    secrets:
      token:
        required: true

jobs:
  debug:
    name: Debug
    runs-on: ubuntu-latest
    if: github.repository == 'Katsute/Repository-Manager'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Print Debug
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.token }}
          script: core.info(require("util").inspect(context, true, 6));

  comment:
    name: Commands
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains('OWNER, MEMBER, COLLABORATOR', github.event.comment.author_association)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Parse Comment
        uses: actions/github-script@v6
        env:
          login: ${{ inputs.login }}
          comment: ${{ github.event.comment.body }}
        with:
          github-token: ${{ secrets.token }}
          script: |
            const login = process.env.login;
            const comment = process.env.comment;

            if(comment.startsWith(`@${login}`)){
              const parts = comment.split(' ').slice(1);
              core.exportVariable("command", parts[0].toLowerCase());
              core.exportVariable("args", parts.slice(1).join(' '));
            }

      - name: Create Issue
        if: env.command == 'issue'
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          TITLE: ${{ env.args }}
        run: gh issue create -t "$TITLE" -b  ""

      - name: Dispatch Workflow
        if: (env.command == 'dispatch' || env.command == 'workflow') && !github.event.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          WORKFLOW: ${{ env.args }}
          REF: ${{ github.event.repository.default_branch }}
          ACTOR: ${{ github.event.sender.login }}
          REPO: ${{ github.repository }}
          ISSUE: ${{ github.event.issue && 'issue' || 'pr' }}
          NUMBER: ${{ github.event.issue && github.event.issue.number || github.event.pull_request.number }}
        run: |
          gh workflow run $WORKFLOW
          gh $ISSUE comment -b "@$ACTOR dispatched workflow ['${WORKFLOW}''](https://github.com/${REPO}/actions/workflows/${WORKFLOW})" on branch '$REF'"

      - name: Dispatch Workflow (pull)
        if: (env.command == 'dispatch' || env.command == 'workflow') && github.event.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          WORKFLOW: ${{ env.args }}
          REF: ${{ github.event.pull_request.head.ref }}
          ACTOR: ${{ github.event.sender.login }}
          REPO: ${{ github.repository }}
          ISSUE: ${{ github.event.issue && 'issue' || 'pr' }}
          NUMBER: ${{ github.event.issue && github.event.issue.number || github.event.pull_request.number }}
        run: |
          gh workflow run $WORKFLOW --ref $REF
          gh $ISSUE comment -b "@$ACTOR dispatched workflow ['${WORKFLOW}''](https://github.com/${REPO}/actions/workflows/${WORKFLOW}) on branch '$REF'"

      - name: Review PR (approve)
        if: env.command == 'approve' && github.event.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          NUMBER: ${{ github.event.pull_request.number }}
          MESSAGE: ${{ env.args }}
        run: gh pr review $NUMBER --approve --comment --body "$MESSAGE"

      - name: Review PR (reject)
        if: env.command == 'reject' && github.event.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          NUMBER: ${{ github.event.pull_request.number }}
          MESSAGE: ${{ env.args }}
        run: gh pr review $NUMBER --request-changes --body "$MESSAGE"

  create:
    name: Branch Rename
    runs-on: ubuntu-latest
    if: github.event_name == 'create' && github.ref_type == 'branch'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Parse Branch
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.token }}
          script: |
            core.exportVariable("ref", context.payload.ref);
            if(context.payload.ref.endsWith('@')){
              const sha = (await github.rest.repos.getCommit({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                ref: context.payload.ref
              })).data.sha.substring(0, 7);

              core.exportVariable("branch", context.payload.ref + sha);
              core.exportVariable("type", "sha");
            }else if(context.payload.ref.startsWith('!')){
              core.exportVariable("branch", context.payload.ref.substring(1));
              core.exportVariable("type", "orphan");
            }

      - name: Create SHA Branch
        if: env.type == 'sha'
        env:
          ref: ${{ env.ref }}
          branch: ${{ env.branch }}
          name: ${{ inputs.username }}
          email: ${{ inputs.email }}
        run: |
          git config --global user.name "$name"
          git config --global user.email "$email"

          git checkout -b $branch
          git push origin HEAD

          git push origin --delete $ref

      - name: Create Orphan Branch
        if: env.type == 'orphan'
        env:
          ref: ${{ env.ref }}
          branch: ${{ env.branch }}
          name: ${{ inputs.username }}
          email: ${{ inputs.email }}
        run: |
          git config --global user.name "$name"
          git config --global user.email "$email"

          git checkout --orphan $branch
          git rm -rf .
          git commit --allow-empty -m 'Initial commit'
          git push origin HEAD

          git push origin --delete $ref

  issue:
    name: Issue Locking
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Issue Lock
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ISSUE: ${{ github.event.issue && 'issue' || 'pr' }}
          NUMBER: ${{ github.event.issue && github.event.issue.number || github.event.pull_request.number }}
          LOCK: ${{ github.event.action == 'closed' && 'lock' || 'unlock' }}
        run: gh $ISSUE $LOCK $NUMBER

  label:
    name: Label Sync
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.repository != 'Katsute/Repository-Manager'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.token }}

      - name: Sync Labels
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          REPO: ${{ github.repository }}
        run: gh label clone Katsute/Repository-Manager --repo $REPO -f